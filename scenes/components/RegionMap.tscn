[gd_scene load_steps=3 format=3 uid="uid://d3vmg8vhant23"]

[ext_resource type="Texture2D" uid="uid://bpim64uek8d2f" path="res://Map_data/region_map.png" id="1_ncdgd"]

[sub_resource type="GDScript" id="GDScript_crrfg"]
script/source = "extends Node2D

@onready var mapImage = $Sprite2D
# Called when the node enters the scene tree for the first time.
func _ready():
	load_regions()

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

func load_regions():
	var image = mapImage.get_texture().get_image()
	var pixel_color_dict = get_pixel_color_dict(image)
	var regions_dict = import_file(\"res://Map_data/regions.txt\")

	for region_color in regions_dict:
		var region = load(\"res://scenes/components/Region_Area.tscn\").instantiate()
		region.region_name = regions_dict[region_color]
		region.set_name(region_color)

		# Set the real color based on the region_color
		var color = Color(region_color)
		# Unlock Jakarta Timur and set its real color
		if region.region_name == \"Jakarta Timur\":
			region.set_real_color(color)
			region.is_locked = false
		else:
			region.is_locked = true # Initially locked

		print(region.region_name)
		print(region.is_locked)
		print(region.real_color)
		get_node(\"Regions\").add_child(region)

		var polygons = get_polygons(image, region_color, pixel_color_dict)

		for polygon in polygons:
			var region_collision = CollisionPolygon2D.new()
			var region_polygon = Polygon2D.new()

			region_collision.polygon = polygon
			region_polygon.polygon = polygon

			region.add_child(region_collision)
			region.add_child(region_polygon)
		mapImage.queue_free()

func get_pixel_color_dict(image):
	var pixel_color_dict = {}
	for y in range(image.get_height()):
		for x in range(image.get_width()):
			var pixel_color = \"#\" + str(image.get_pixel(int(x), int(y)).to_html(false))
			if pixel_color not in pixel_color_dict:
				pixel_color_dict[pixel_color] = []
			pixel_color_dict[pixel_color].append(Vector2(x,y))
	return pixel_color_dict

func get_polygons(image, region_color, pixel_color_dict):
	var targetImage = Image.create(image.get_size().x,image.get_size().y, false, Image.FORMAT_RGBA8)
	for value in pixel_color_dict[region_color]:
		targetImage.set_pixel(value.x,value.y, \"#ffffff\")
		
	var bitmap = BitMap.new()
	bitmap.create_from_image_alpha(targetImage)
	var polygons = bitmap.opaque_to_polygons(Rect2(Vector2(0,0), bitmap.get_size()), 0.1)
	return polygons

#Import JSON files and converts to lists or dictionary
func import_file(filepath):
	var file = FileAccess.open(filepath, FileAccess.READ)
	if file != null:
		return JSON.parse_string(file.get_as_text().replace(\"_\", \" \"))
	else:
		print(\"Failed to open file:\", filepath)
		return null
"

[node name="Main" type="Node2D"]
script = SubResource("GDScript_crrfg")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("1_ncdgd")

[node name="Camera2D" type="Camera2D" parent="Sprite2D"]

[node name="Regions" type="Node2D" parent="."]

[node name="ColorRect" type="ColorRect" parent="."]
z_index = 1
